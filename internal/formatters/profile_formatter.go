package formatters

import (
	"evo-bot-go/internal/constants"
	"evo-bot-go/internal/database/repositories"
	"fmt"

	"github.com/PaulSonOfLars/gotgbot/v2"
)

func ProfileMainButtons() gotgbot.InlineKeyboardMarkup {
	return gotgbot.InlineKeyboardMarkup{
		InlineKeyboard: [][]gotgbot.InlineKeyboardButton{
			{
				{
					Text:         "üë§ –ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å",
					CallbackData: constants.ProfileViewMyProfileCallback,
				},
				{
					Text:         "‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å",
					CallbackData: constants.ProfileEditMyProfileCallback,
				},
			},
			{
				{
					Text:         "üîé –ü–æ–∏—Å–∫ –ø—Ä–æ—Ñ–∏–ª—è",
					CallbackData: constants.ProfileViewOtherProfileCallback,
				},
			},
			{
				{
					Text:         "‚ùå –û—Ç–º–µ–Ω–∞",
					CallbackData: constants.ProfileFullCancel,
				},
			},
		},
	}
}

func ProfileEditBackCancelButtons(backCallbackData string) gotgbot.InlineKeyboardMarkup {
	return gotgbot.InlineKeyboardMarkup{
		InlineKeyboard: [][]gotgbot.InlineKeyboardButton{
			{
				{
					Text:         "‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –º–æ–π –ø—Ä–æ—Ñ–∏–ª—å",
					CallbackData: constants.ProfileEditMyProfileCallback,
				},
			},
			{
				{
					Text:         "‚óÄÔ∏è –ù–∞–∑–∞–¥",
					CallbackData: backCallbackData,
				},
				{
					Text:         "‚ùå –û—Ç–º–µ–Ω–∞",
					CallbackData: constants.ProfileFullCancel,
				},
			},
		},
	}
}

func ProfileBackCancelButtons(backCallbackData string) gotgbot.InlineKeyboardMarkup {
	return gotgbot.InlineKeyboardMarkup{
		InlineKeyboard: [][]gotgbot.InlineKeyboardButton{
			{
				{
					Text:         "‚óÄÔ∏è –ù–∞–∑–∞–¥",
					CallbackData: backCallbackData,
				},
				{
					Text:         "‚ùå –û—Ç–º–µ–Ω–∞",
					CallbackData: constants.ProfileFullCancel,
				},
			},
		},
	}
}

func ProfileSearchBackCancelButtons(backCallbackData string) gotgbot.InlineKeyboardMarkup {
	return gotgbot.InlineKeyboardMarkup{
		InlineKeyboard: [][]gotgbot.InlineKeyboardButton{
			{
				{
					Text:         "üîé –ï—â—ë —Ä–∞–∑",
					CallbackData: constants.ProfileViewOtherProfileCallback,
				},
			}, {
				{
					Text:         "‚óÄÔ∏è –ù–∞–∑–∞–¥",
					CallbackData: backCallbackData,
				},
				{
					Text:         "‚ùå –û—Ç–º–µ–Ω–∞",
					CallbackData: constants.ProfileFullCancel,
				},
			},
		},
	}
}

func ProfileEditButtons(backCallbackData string) gotgbot.InlineKeyboardMarkup {
	return gotgbot.InlineKeyboardMarkup{
		InlineKeyboard: [][]gotgbot.InlineKeyboardButton{
			{
				{
					Text:         "üë§ –ò–º—è",
					CallbackData: constants.ProfileEditFirstnameCallback,
				},
				{
					Text:         "üë§ –§–∞–º–∏–ª–∏—è",
					CallbackData: constants.ProfileEditLastnameCallback,
				},
			},
			{
				{
					Text:         "üìù –ë–∏–æ–≥—Ä–∞—Ñ–∏—è",
					CallbackData: constants.ProfileEditBioCallback,
				},
			},
			{
				{
					Text:         "üíº LinkedIn",
					CallbackData: constants.ProfileEditLinkedinCallback,
				},
				{
					Text:         "üíæ GitHub",
					CallbackData: constants.ProfileEditGithubCallback,
				},
				{
					Text:         "üåê –°—Å—ã–ª–∫–∞",
					CallbackData: constants.ProfileEditWebsiteCallback,
				},
			},
			{
				{
					Text:         "‚óÄÔ∏è –ù–∞–∑–∞–¥",
					CallbackData: backCallbackData,
				},
				{
					Text:         "‚ùå –û—Ç–º–µ–Ω–∞",
					CallbackData: constants.ProfileFullCancel,
				},
			},
		},
	}
}

// Format a readable view of a user profile
func FormatProfileView(user *repositories.User, profile *repositories.Profile, showScore bool) string {
	if profile == nil {
		return "–í–∞—à –ø—Ä–æ—Ñ–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.\n\n–°–æ–∑–¥–∞–π—Ç–µ –ø—Ä–æ—Ñ–∏–ª—å —á–µ—Ä–µ–∑ –∫–Ω–æ–ø–∫—É \"–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –º–æ–π –ø—Ä–æ—Ñ–∏–ª—å\"."
	}

	// Format username
	username := user.Firstname
	if user.Lastname != "" {
		username += " " + user.Lastname
	}
	if user.TgUsername != "" {
		username += " (@" + user.TgUsername + ")"
	}

	// Build profile text
	text := fmt.Sprintf("<b>–ü—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:</b> %s\n", username)

	if profile.Bio != "" {
		text += fmt.Sprintf("\n<b>–û —Å–µ–±–µ:</b>\n%s\n", profile.Bio)
	}

	// Add social links section if any exists
	hasLinks := profile.LinkedIn != "" || profile.GitHub != "" || profile.Website != ""
	if hasLinks {
		text += "\n<b>–°—Å—ã–ª–∫–∏:</b>\n"

		if profile.LinkedIn != "" {
			text += fmt.Sprintf("‚Ä¢ LinkedIn: %s\n", profile.LinkedIn)
		}

		if profile.GitHub != "" {
			text += fmt.Sprintf("‚Ä¢ GitHub: %s\n", profile.GitHub)
		}

		if profile.Website != "" {
			text += fmt.Sprintf("‚Ä¢ –í–µ–±—Å–∞–π—Ç: %s\n", profile.Website)
		}
	}

	if showScore && user.Score > 100 {
		text += fmt.Sprintf("\n<b>%d</b> <i>(—á—Ç–æ —ç—Ç–æ? —Ö–º...)</i>\n", user.Score)
	}

	return text
}
