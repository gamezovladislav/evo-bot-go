package topicshandlers

import (
	"context"
	"fmt"
	"log"
	"strconv"
	"strings"

	"evo-bot-go/internal/config"
	"evo-bot-go/internal/constants"
	"evo-bot-go/internal/database/repositories"
	"evo-bot-go/internal/services"
	"evo-bot-go/internal/utils"

	"github.com/PaulSonOfLars/gotgbot/v2"
	"github.com/PaulSonOfLars/gotgbot/v2/ext"
	"github.com/PaulSonOfLars/gotgbot/v2/ext/handlers"
	"github.com/PaulSonOfLars/gotgbot/v2/ext/handlers/filters/message"
)

const (
	// Conversation states
	topicAddStateSelectEvent = "topic_add_select_event"
	topicAddStateEnterTopic  = "topic_add_enter_topic"

	// UserStore keys
	topicAddUserStoreKeySelectedEventID   = "topic_add_selected_event_id"
	topicAddUserStoreKeySelectedEventName = "topic_add_selected_event_name"
	topicAddUserStoreKeyCancelFunc        = "topic_add_cancel_func"
)

type topicAddHandler struct {
	config               *config.Config
	topicRepository      *repositories.TopicRepository
	eventRepository      *repositories.EventRepository
	messageSenderService services.MessageSenderService
	userStore            *utils.UserDataStore
}

func NewTopicAddHandler(
	config *config.Config,
	topicRepository *repositories.TopicRepository,
	eventRepository *repositories.EventRepository,
	messageSenderService services.MessageSenderService,
) ext.Handler {
	h := &topicAddHandler{
		config:               config,
		topicRepository:      topicRepository,
		eventRepository:      eventRepository,
		messageSenderService: messageSenderService,
		userStore:            utils.NewUserDataStore(),
	}

	return handlers.NewConversation(
		[]ext.Handler{
			handlers.NewCommand(constants.TopicAddCommand, h.startTopicAdd),
		},
		map[string][]ext.Handler{
			topicAddStateSelectEvent: {
				handlers.NewMessage(message.All, h.handleEventSelection),
			},
			topicAddStateEnterTopic: {
				handlers.NewMessage(message.All, h.handleTopicEntry),
			},
		},
		&handlers.ConversationOpts{
			Exits: []ext.Handler{handlers.NewCommand(constants.CancelCommand, h.handleCancel)},
		},
	)
}

// 1. startTopicAdd is the entry point handler for adding a topic
func (h *topicAddHandler) startTopicAdd(b *gotgbot.Bot, ctx *ext.Context) error {
	msg := ctx.EffectiveMessage

	// Only proceed if this is a private chat
	if !utils.CheckPrivateChatType(b, ctx) {
		return handlers.EndConversation()
	}

	// Check if user is a club member
	if !utils.CheckClubMemberPermissions(b, msg, h.config, constants.TopicAddCommand) {
		return handlers.EndConversation()
	}

	// Get last actual events to show for selection
	events, err := h.eventRepository.GetLastActualEvents(10)
	if err != nil {
		h.messageSenderService.Reply(b, msg, "–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π.", nil)
		log.Printf("TopicAddHandler: Error during events retrieval: %v", err)
		return handlers.EndConversation()
	}

	if len(events) == 0 {
		h.messageSenderService.Reply(b, msg, "–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ç–µ–º –∏ –≤–æ–ø—Ä–æ—Å–æ–≤.", nil)
		return handlers.EndConversation()
	}

	// Format and display event list for selection
	formattedEvents := utils.FormatEventListForUsers(
		events,
		fmt.Sprintf("–í—ã–±–µ—Ä–∏ ID –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è, –∫ –∫–æ—Ç–æ—Ä–æ–º—É —Ç—ã —Ö–æ—á–µ—à—å –∑–∞–∫–∏–Ω—É—Ç—å —Ç–µ–º—ã –∏–ª–∏ –≤–æ–ø—Ä–æ—Å—ã, –ª–∏–±–æ –∂–º–∏ /%s –¥–ª—è –æ—Ç–º–µ–Ω—ã –¥–∏–∞–ª–æ–≥–∞", constants.CancelCommand),
	)

	utils.SendLoggedMarkdownReply(b, msg, formattedEvents, nil)

	return handlers.NextConversationState(topicAddStateSelectEvent)
}

// 2. handleEventSelection processes the user's event selection
func (h *topicAddHandler) handleEventSelection(b *gotgbot.Bot, ctx *ext.Context) error {
	msg := ctx.EffectiveMessage
	userInput := strings.TrimSpace(msg.Text)

	// Check if the input is a valid event ID
	eventID, err := strconv.Atoi(userInput)
	if err != nil {
		h.messageSenderService.Reply(
			b,
			msg,
			fmt.Sprintf("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è –∏–ª–∏ –∂–º–∏ /%s –¥–ª—è –æ—Ç–º–µ–Ω—ã.", constants.CancelCommand),
			nil,
		)
		return nil // Stay in the same state
	}

	// Get the event information
	event, err := h.eventRepository.GetEventByID(eventID)
	if err != nil {
		h.messageSenderService.Reply(
			b,
			msg,
			fmt.Sprintf("–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ —Å ID %d. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–≤–µ—Ä—å ID.", eventID),
			nil,
		)
		log.Printf("TopicAddHandler: Error during event retrieval: %v", err)
		return nil // Stay in the same state
	}

	// Store the selected event ID for later use when creating a new topic
	h.userStore.Set(ctx.EffectiveUser.Id, topicAddUserStoreKeySelectedEventID, eventID)
	h.userStore.Set(ctx.EffectiveUser.Id, topicAddUserStoreKeySelectedEventName, event.Name)

	// Prompt user to enter a topic
	utils.SendLoggedMarkdownReply(
		b,
		msg,
		fmt.Sprintf("–û—Ç–ø—Ä–∞–≤—å –º–Ω–µ —Ç–µ–º—ã –∏ –≤–æ–ø—Ä–æ—Å—ã –∫ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—é *%s*, –ª–∏–±–æ –∏—Å–ø–æ–ª—å–∑—É–π /%s –¥–ª—è –æ—Ç–º–µ–Ω—ã –¥–∏–∞–ª–æ–≥–∞.", event.Name, constants.CancelCommand),
		nil,
	)

	return handlers.NextConversationState(topicAddStateEnterTopic)
}

// 3. handleTopicEntry handles the user's topic input
func (h *topicAddHandler) handleTopicEntry(b *gotgbot.Bot, ctx *ext.Context) error {
	msg := ctx.EffectiveMessage
	topicText := strings.TrimSpace(msg.Text)

	if topicText == "" {
		h.messageSenderService.Reply(
			b,
			msg,
			"–¢–µ–º–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç–æ–π. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏ —Ç–µ–∫—Å—Ç —Ç–µ–º—ã –∏–ª–∏ /cancel –¥–ª—è –æ—Ç–º–µ–Ω—ã.",
			nil,
		)
		log.Printf("TopicAddHandler: Empty topic text")
		return nil // Stay in the same state
	}

	// Get the selected event ID from user store
	eventIDInterface, ok := h.userStore.Get(ctx.EffectiveUser.Id, topicAddUserStoreKeySelectedEventID)
	if !ok {
		h.messageSenderService.Reply(
			b,
			msg,
			"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: –Ω–µ –Ω–∞–π–¥–µ–Ω –≤—ã–±—Ä–∞–Ω–Ω–æ–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏ –∑–∞–Ω–æ–≤–æ.",
			nil,
		)
		log.Printf("TopicAddHandler: Event ID not found in user store")
		return handlers.EndConversation()
	}

	eventID := eventIDInterface.(int)
	userNickname := "–Ω–µ —É–∫–∞–∑–∞–Ω–æ"
	if ctx.EffectiveUser.Username != "" {
		userNickname = ctx.EffectiveUser.Username
	}

	// Create the new topic
	_, err := h.topicRepository.CreateTopic(topicText, userNickname, eventID)
	if err != nil {
		h.messageSenderService.Reply(b, msg, "–û–π! –ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫...", nil)
		log.Printf("TopicAddHandler: Error during topic creation in database: %v", err)
		return handlers.EndConversation()
	}

	// Send notification to admin about new topic
	eventName, _ := h.userStore.Get(ctx.EffectiveUser.Id, topicAddUserStoreKeySelectedEventName)
	adminChatID := h.config.AdminUserID

	adminMsg := fmt.Sprintf(
		"üîî *–ù–æ–≤–∞—è —Ç–µ–º–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞*\n\n"+
			"_–ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ:_ %s\n"+
			"_–ê–≤—Ç–æ—Ä:_ @%s\n"+
			"_–¢–æ–ø–∏–∫:_ %s",
		eventName,
		userNickname,
		topicText,
	)

	h.messageSenderService.Send(adminChatID, adminMsg, nil)

	h.messageSenderService.Reply(
		b,
		msg,
		fmt.Sprintf("–î–æ–±–∞–≤–ª–µ–Ω–æ! \n–ò—Å–ø–æ–ª—å–∑—É–π –∫–æ–º–∞–Ω–¥—É /%s –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –≤—Å–µ—Ö —Ç–µ–º –∏ –≤–æ–ø—Ä–æ—Å–æ–≤ –∫ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—é.", constants.TopicsCommand),
		nil,
	)

	// Clean up user data
	h.userStore.Clear(ctx.EffectiveUser.Id)

	return handlers.EndConversation()
}

// 4. handleCancel handles the /cancel command
func (h *topicAddHandler) handleCancel(b *gotgbot.Bot, ctx *ext.Context) error {
	msg := ctx.EffectiveMessage

	// Check if there's an ongoing operation to cancel
	if cancelFunc, ok := h.userStore.Get(ctx.EffectiveUser.Id, topicAddUserStoreKeyCancelFunc); ok {
		// Call the cancel function to stop any ongoing API calls
		if cf, ok := cancelFunc.(context.CancelFunc); ok {
			cf()
			h.messageSenderService.Reply(b, msg, "–û–ø–µ—Ä–∞—Ü–∏—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ç–µ–º—ã –æ—Ç–º–µ–Ω–µ–Ω–∞.", nil)
		}
	} else {
		h.messageSenderService.Reply(b, msg, "–û–ø–µ—Ä–∞—Ü–∏—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ç–µ–º—ã –æ—Ç–º–µ–Ω–µ–Ω–∞.", nil)
	}

	// Clean up user data
	h.userStore.Clear(ctx.EffectiveUser.Id)

	return handlers.EndConversation()
}
