package privatehandlers

import (
	"evo-bot-go/internal/config"
	"evo-bot-go/internal/constants"
	"evo-bot-go/internal/database/repositories"
	"evo-bot-go/internal/formatters"
	"evo-bot-go/internal/services"
	"fmt"
	"log"

	"github.com/PaulSonOfLars/gotgbot/v2"
	"github.com/PaulSonOfLars/gotgbot/v2/ext"
	"github.com/PaulSonOfLars/gotgbot/v2/ext/handlers"
)

type eventsHandler struct {
	config               *config.Config
	eventRepository      *repositories.EventRepository
	messageSenderService services.MessageSenderService
	permissionsService   *services.PermissionsService
}

func NewEventsHandler(
	config *config.Config,
	eventRepository *repositories.EventRepository,
	messageSenderService services.MessageSenderService,
	permissionsService *services.PermissionsService,
) ext.Handler {
	h := &eventsHandler{
		config:               config,
		eventRepository:      eventRepository,
		messageSenderService: messageSenderService,
		permissionsService:   permissionsService,
	}

	return handlers.NewCommand(constants.EventsCommand, h.handleCommand)
}

func (h *eventsHandler) handleCommand(b *gotgbot.Bot, ctx *ext.Context) error {
	msg := ctx.EffectiveMessage

	// Only proceed if this is a private chat
	if !h.permissionsService.CheckPrivateChatType(b, ctx) {
		return nil
	}

	// Check if user is a club member
	if !h.permissionsService.CheckClubMemberPermissions(b, msg, constants.EventsCommand) {
		return nil
	}

	// Get actual events to show
	events, err := h.eventRepository.GetLastActualEvents(10) // Fetch last 10 actual events
	if err != nil {
		h.messageSenderService.Reply(b, msg, "–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π.", nil)
		log.Printf("EventsHandler: Error during events retrieval: %v", err)
		return nil
	}

	if len(events) == 0 {
		h.messageSenderService.Reply(b, msg, "–ù–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –Ω–µ—Ç –∞–∫—Ç—É–∞–ª—å–Ω—ã—Ö –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π.", nil)
		return nil
	}

	// Format and display event list
	formattedEvents := formatters.FormatEventListForUsersWithoutIds(
		events,
		"üìã –°–ø–∏—Å–æ–∫ –±–ª–∏–∂–∞–π—à–∏—Ö –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π",
	)
	formattedEvents += fmt.Sprintf("\n–ò—Å–ø–æ–ª—å–∑—É–π –∫–æ–º–∞–Ω–¥—É /%s, –µ—Å–ª–∏ —Ö–æ—á–µ—à—å –ø—Ä–µ–¥–ª–æ–∂–∏—Ç—å —Ç–µ–º—ã –∏ –≤–æ–ø—Ä–æ—Å—ã –∫ —ç—Ç–∏–º –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è–º, –ª–∏–±–æ –∫–æ–º–∞–Ω–¥—É /%s –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —É–∂–µ –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã—Ö —Ç–µ–º –∏ –≤–æ–ø—Ä–æ—Å–æ–≤.", constants.TopicAddCommand, constants.TopicsCommand)
	formattedEvents += "\n\n–ê –≤–æ—Ç —Å—Å—ã–ª–∫–∞ –Ω–∞ [–∫–ª—É–±–Ω—ã–π –∫–∞–ª–µ–Ω–¥–∞—Ä—å](https://itbeard.com/s/evo-calendar), –∫–æ—Ç–æ—Ä—ã–π –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –∫ —Å–µ–±–µ –∏ —É–¥–æ–±–Ω–æ —Å–ª–µ–¥–∏—Ç—å –≤—Å–µ–º–∏ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è–º–∏ –∫–ª—É–±–∞."
	h.messageSenderService.ReplyMarkdown(b, msg, formattedEvents, nil)

	return nil
}
