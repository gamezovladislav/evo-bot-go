package privatehandlers

import (
	"evo-bot-go/internal/config"
	"evo-bot-go/internal/constants"
	"evo-bot-go/internal/database/repositories"
	"evo-bot-go/internal/utils"
	"fmt"

	"github.com/PaulSonOfLars/gotgbot/v2"
	"github.com/PaulSonOfLars/gotgbot/v2/ext"
	"github.com/PaulSonOfLars/gotgbot/v2/ext/handlers"
)

type showContentHandler struct {
	contentRepository *repositories.ContentRepository
	config            *config.Config
}

func NewShowContentHandler(
	contentRepository *repositories.ContentRepository,
	config *config.Config,
) ext.Handler {
	h := &showContentHandler{
		contentRepository: contentRepository,
		config:            config,
	}

	return handlers.NewCommand(constants.ContentShowCommand, h.handleCommand)
}

func (h *showContentHandler) handleCommand(b *gotgbot.Bot, ctx *ext.Context) error {
	msg := ctx.EffectiveMessage

	// Only proceed if this is a private chat
	if !utils.CheckPrivateChatType(b, ctx) {
		return nil
	}

	// Check if user is a club member
	if !utils.CheckClubMemberPermissions(b, msg, h.config, constants.ContentShowCommand) {
		return nil
	}

	// Get actual contents to show
	contents, err := h.contentRepository.GetLastActualContents(10) // Fetch last 10 actual contents
	if err != nil {
		utils.SendLoggedReply(b, msg, "–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –∫–æ–Ω—Ç–µ–Ω—Ç–∞.", err)
		return nil
	}

	if len(contents) == 0 {
		utils.SendLoggedReply(b, msg, "–ù–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –Ω–µ—Ç –∞–∫—Ç—É–∞–ª—å–Ω–æ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç–∞.", nil)
		return nil
	}

	// Format and display content list
	formattedContents := utils.FormatContentListForUsersWithoutIds(
		contents,
		"üìã –°–ø–∏—Å–æ–∫ –±–ª–∏–∂–∞–π—à–∏—Ö –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π",
	)
	formattedContents += fmt.Sprintf("\n–ò—Å–ø–æ–ª—å–∑—É–π –∫–æ–º–∞–Ω–¥—É /%s, –µ—Å–ª–∏ —Ö–æ—á–µ—à—å –ø—Ä–µ–¥–ª–æ–∂–∏—Ç—å —Ç–µ–º—É –∏–ª–∏ –≤–æ–ø—Ä–æ—Å—ã –∫ —ç—Ç–∏–º –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è–º.", constants.TopicAddCommand)
	utils.SendLoggedMarkdownReply(b, msg, formattedContents, nil)

	return nil
}
